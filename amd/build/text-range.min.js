define("mod_margic/text-range",["exports"],(function(_exports){function nodeTextLength(node){switch(node.nodeType){case Node.ELEMENT_NODE:case Node.TEXT_NODE:return node.textContent.length;default:return 0}}function previousSiblingsTextLength(node){let sibling=node.previousSibling,length=0;for(;sibling;)length+=nodeTextLength(sibling),sibling=sibling.previousSibling;return length}function resolveOffsets(element){for(var _len=arguments.length,offsets=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)offsets[_key-1]=arguments[_key];let nextOffset=offsets.shift();const nodeIter=element.ownerDocument.createNodeIterator(element,NodeFilter.SHOW_TEXT),results=[];let textNode,currentNode=nodeIter.nextNode(),length=0;for(;void 0!==nextOffset&&currentNode;)textNode=currentNode,length+textNode.data.length>nextOffset?(results.push({node:textNode,offset:nextOffset-length}),nextOffset=offsets.shift()):(currentNode=nodeIter.nextNode(),length+=textNode.data.length);for(;void 0!==nextOffset&&length===nextOffset;)results.push({node:textNode,offset:textNode.data.length}),nextOffset=offsets.shift();if(void 0!==nextOffset)throw new RangeError("Offset exceeds text length");return results}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.TextRange=_exports.TextPosition=_exports.RESOLVE_FORWARDS=_exports.RESOLVE_BACKWARDS=void 0;_exports.RESOLVE_FORWARDS=1;_exports.RESOLVE_BACKWARDS=2;class TextPosition{constructor(element,offset){if(offset<0)throw new Error("Offset is invalid");this.element=element,this.offset=offset}relativeTo(parent){if(!parent.contains(this.element))throw new Error("Parent is not an ancestor of current element");let el=this.element,offset=this.offset;for(;el!==parent;)offset+=previousSiblingsTextLength(el),el=el.parentElement;return new TextPosition(el,offset)}resolve(){let options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{return resolveOffsets(this.element,this.offset)[0]}catch(err){if(0===this.offset&&void 0!==options.direction){const tw=document.createTreeWalker(this.element.getRootNode(),NodeFilter.SHOW_TEXT);tw.currentNode=this.element;const forwards=1===options.direction,text=forwards?tw.nextNode():tw.previousNode();if(!text)throw err;return{node:text,offset:forwards?0:text.data.length}}throw err}}static fromCharOffset(node,offset){switch(node.nodeType){case Node.TEXT_NODE:return TextPosition.fromPoint(node,offset);case Node.ELEMENT_NODE:return new TextPosition(node,offset);default:throw new Error("Node is not an element or text node")}}static fromPoint(node,offset){switch(node.nodeType){case Node.TEXT_NODE:{if(offset<0||offset>node.data.length)throw new Error("Text node offset is out of range");if(!node.parentElement)throw new Error("Text node has no parent");const textOffset=previousSiblingsTextLength(node)+offset;return new TextPosition(node.parentElement,textOffset)}case Node.ELEMENT_NODE:{if(offset<0||offset>node.childNodes.length)throw new Error("Child node offset is out of range");let textOffset=0;for(let i=0;i<offset;i++)textOffset+=nodeTextLength(node.childNodes[i]);return new TextPosition(node,textOffset)}default:throw new Error("Point is not in an element or text node")}}}_exports.TextPosition=TextPosition;class TextRange{constructor(start,end){this.start=start,this.end=end}relativeTo(element){return new TextRange(this.start.relativeTo(element),this.end.relativeTo(element))}toRange(){let start,end;this.start.element===this.end.element&&this.start.offset<=this.end.offset?[start,end]=resolveOffsets(this.start.element,this.start.offset,this.end.offset):(start=this.start.resolve({direction:1}),end=this.end.resolve({direction:2}));const range=new Range;return range.setStart(start.node,start.offset),range.setEnd(end.node,end.offset),range}static fromRange(range){const start=TextPosition.fromPoint(range.startContainer,range.startOffset),end=TextPosition.fromPoint(range.endContainer,range.endOffset);return new TextRange(start,end)}static fromOffsets(root,start,end){return new TextRange(new TextPosition(root,start),new TextPosition(root,end))}}_exports.TextRange=TextRange}));

//# sourceMappingURL=text-range.min.js.map