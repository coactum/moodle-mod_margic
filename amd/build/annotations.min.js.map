{"version":3,"sources":["../src/annotations.js"],"names":["define","$","init","annotations","canmakeannotations","hide","removeClass","editAnnotation","annotationid","removeAllTempHighlights","resetForms","entry","val","startcontainer","endcontainer","startposition","endposition","text","type","html","css","color","insertBefore","show","focus","not","wholeTextNodesInRange","range","collapsed","root","commonAncestorContainer","nodeType","Node","ELEMENT_NODE","parentElement","textNodes","nodeIter","ownerDocument","createNodeIterator","NodeFilter","SHOW_TEXT","node","nextNode","isNodeInRange","startContainer","startOffset","splitText","endContainer","endOffset","data","length","push","highlightRange","cssClass","textNodeSpans","prevNode","currentSpan","forEach","nextSibling","filter","span","some","test","nodeValue","hihglightedtext","nodes","highlightEl","document","createElement","className","id","style","backgroundColor","textContent","parentNode","replaceChild","appendChild","childNodes","comparePoint","e","getNodeName","nodeName","toLowerCase","result","getNodePosition","pos","tmp","previousSibling","getPathSegment","name","xpathFromNode","xpath","elem","Error","replace","nthChildOfType","element","index","toUpperCase","matchIndex","i","child","children","evaluateSimpleXPath","isSimpleXPath","match","segments","split","shift","segment","elementName","elementIndex","separatorPos","indexOf","slice","indexStr","parseInt","nodeFromXPath","body","err","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","replaceWith","replacements","parent","r","remove","highlights","Array","from","querySelectorAll","removeHighlights","pn","normalize","on","selectedrange","window","getSelection","getRangeAt","cloneContents","annotatedtext","Object","values","annotation","newrange","createRange","setStart","setEnd","mouseenter","addClass","mouseleave","preventDefault","keypress","which","parents","submit"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module for the annotation functions of the margic.\n *\n * @module     mod_margic/annotations\n * @package    mod_margic\n * @copyright  2022 coactum GmbH\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n define(['jquery'], function($) {\n    return {\n        init: function(annotations, canmakeannotations) {\n\n            // Hide all Moodle forms\n            $('.annotation-form').hide();\n\n            // remove col-mds from moodle form\n            $('.annotation-form div.col-md-3').removeClass('col-md-3');\n            $('.annotation-form div.col-md-9').removeClass('col-md-9');\n            $('.annotation-form div.form-group').removeClass('form-group');\n            $('.annotation-form div.row').removeClass('row');\n\n            function recreateAnnotations(){\n                for (let annotation of Object.values(annotations)) {\n\n                    //recreate range from db\n                    var newrange = document.createRange();\n\n                    try {\n                        newrange.setStart(nodeFromXPath(annotation.startcontainer, $( \"#entry-\" + annotation.entry)[0]), annotation.startposition);\n                        newrange.setEnd(nodeFromXPath(annotation.endcontainer, $( \"#entry-\" + annotation.entry)[0]), annotation.endposition);\n                     }\n                     catch (e) {\n                     }\n\n                    var annotatedtext = highlightRange(newrange, annotation.id, 'annotated', annotation.color);\n\n                    if (annotatedtext != '') {\n                        $('#annotationpreview-' + annotation.id).html(annotatedtext);\n                    }\n                }\n            }\n\n            function editAnnotation(annotationid) {\n                if (canmakeannotations) {\n                    removeAllTempHighlights();\n                    resetForms();\n\n                    var entry = annotations[annotationid].entry;\n\n                    $('.annotation-box-' + annotationid).hide(); // hide edited annotation-box\n\n                    $('.annotation-form-' + entry + ' input[name=\"startcontainer\"]').val(annotations[annotationid].startcontainer);\n                    $('.annotation-form-' + entry + ' input[name=\"endcontainer\"]').val(annotations[annotationid].endcontainer);\n                    $('.annotation-form-' + entry + ' input[name=\"startposition\"]').val(annotations[annotationid].startposition);\n                    $('.annotation-form-' + entry + ' input[name=\"endposition\"]').val(annotations[annotationid].endposition);\n\n                    $('.annotation-form-' + entry + ' input[name=\"annotationid\"]').val(annotationid);\n\n                    $('.annotation-form-' + entry + ' textarea[name=\"text\"]').val(annotations[annotationid].text);\n\n                    $('.annotation-form-' + entry + ' select').val(annotations[annotationid].type);\n\n                    $('#annotationpreview-temp-' + entry).html($('#annotationpreview-' + annotationid).html());\n                    $('#annotationpreview-temp-' + entry).css( 'border-color', '#' + annotations[annotationid].color);\n\n                    $('.annotationarea-' + entry + ' .annotation-form').insertBefore('.annotation-box-' + annotationid);\n                    $('.annotationarea-' + entry + ' .annotation-form').show();\n                    $('.annotationarea-' + entry + ' #id_text').focus();\n                }\n            }\n\n            function resetForms(){\n                $('.annotation-form').hide();\n\n                $('.annotation-form input[name^=\"annotationid\"]').val(null);\n\n                $('.annotation-form input[name^=\"startcontainer\"]').val(-1);\n                $('.annotation-form input[name^=\"endcontainer\"]').val(-1);\n                $('.annotation-form input[name^=\"startposition\"]').val(-1);\n                $('.annotation-form input[name^=\"endposition\"]').val(-1);\n\n                $('.annotation-form textarea[name^=\"text\"]').val('');\n\n                $('.annotation-box').not('.annotation-form').show(); // To show again edited annotation\n            }\n\n            /**\n             * Return text nodes which are entirely inside `range`.\n             *\n             * If a range starts or ends part-way through a text node, the node is split\n             * and the part inside the range is returned.\n             *\n             * @param {Range} range\n             * @return {Text[]}\n             */\n            function wholeTextNodesInRange(range) {\n                if (range.collapsed) {\n                    // Exit early for an empty range to avoid an edge case that breaks the algorithm\n                    // below. Splitting a text node at the start of an empty range can leave the\n                    // range ending in the left part rather than the right part.\n                    return [];\n                }\n\n                /** @type {Node|null} */\n                let root = range.commonAncestorContainer;\n                if (root.nodeType !== Node.ELEMENT_NODE) {\n                    // If the common ancestor is not an element, set it to the parent element to\n                    // ensure that the loop below visits any text nodes generated by splitting\n                    // the common ancestor.\n                    //\n                    // Note that `parentElement` may be `null`.\n                    root = root.parentElement;\n                }\n                if (!root) {\n                    // If there is no root element then we won't be able to insert highlights,\n                    // so exit here.\n                    return [];\n                }\n\n                const textNodes = [];\n                const nodeIter = /** @type {Document} */ (\n                root.ownerDocument\n                ).createNodeIterator(\n                root,\n                NodeFilter.SHOW_TEXT // Only return `Text` nodes.\n                );\n                let node;\n                while ((node = nodeIter.nextNode())) {\n                    if (!isNodeInRange(range, node)) {\n                        continue;\n                    }\n                    let text = /** @type {Text} */ (node);\n\n                    if (text === range.startContainer && range.startOffset > 0) {\n                        // Split `text` where the range starts. The split will create a new `Text`\n                        // node which will be in the range and will be visited in the next loop iteration.\n                        text.splitText(range.startOffset);\n                        continue;\n                    }\n\n                    if (text === range.endContainer && range.endOffset < text.data.length) {\n                        // Split `text` where the range ends, leaving it as the part in the range.\n                        text.splitText(range.endOffset);\n                    }\n\n                    textNodes.push(text);\n                }\n\n                return textNodes;\n            }\n\n            /**\n             * Wraps the DOM Nodes within the provided range with a highlight\n             * element of the specified class and returns the highlight Elements.\n             *\n             * @param {Range} range - Range to be highlighted\n             * @param {string} cssClass - A CSS class to use for the highlight\n             * @return {HighlightElement[]} - Elements wrapping text in `normedRange` to add a highlight effect\n             */\n            function highlightRange(range, annotationid = false, cssClass = 'annotated', color = 'FFFF00') {\n\n                const textNodes = wholeTextNodesInRange(range);\n\n                // Group text nodes into spans of adjacent nodes. If a group of text nodes are\n                // adjacent, we only need to create one highlight element for the group.\n                let textNodeSpans = [];\n                let prevNode = null;\n                let currentSpan = null;\n\n                textNodes.forEach(node => {\n                    if (prevNode && prevNode.nextSibling === node) {\n                        currentSpan.push(node);\n                    } else {\n                        currentSpan = [node];\n                        textNodeSpans.push(currentSpan);\n                    }\n                    prevNode = node;\n                });\n\n                // Filter out text node spans that consist only of white space. This avoids\n                // inserting highlight elements in places that can only contain a restricted\n                // subset of nodes such as table rows and lists.\n                const whitespace = /^\\s*$/;\n                textNodeSpans = textNodeSpans.filter(span =>\n                    // Check for at least one text node with non-space content.\n                    span.some(node => !whitespace.test(node.nodeValue))\n                );\n\n                // Wrap each text node span with a `<span>` element.\n                var hihglightedtext = '';\n\n                textNodeSpans.forEach(nodes => {\n                    const highlightEl = document.createElement('span');\n                    highlightEl.className = cssClass;\n\n                    if (annotationid) {\n                        highlightEl.className += ' ' + cssClass + '-' + annotationid;\n                        highlightEl.id = cssClass + '-' + annotationid;\n                        highlightEl.style.backgroundColor = '#' + color;\n                    }\n\n                    hihglightedtext += nodes[0].textContent;\n\n                    nodes[0].parentNode.replaceChild(highlightEl, nodes[0]);\n                    nodes.forEach(node => highlightEl.appendChild(node));\n\n                });\n\n                return hihglightedtext;\n            }\n\n            /**\n             * Returns true if any part of `node` lies within `range`.\n             *\n             * @param {Range} range\n             * @param {Node} node\n             */\n            function isNodeInRange(range, node) {\n                try {\n                    const length = node.nodeValue?.length ?? node.childNodes.length;\n                    return (\n                        // Check start of node is before end of range.\n                        range.comparePoint(node, 0) <= 0 &&\n                        // Check end of node is after start of range.\n                        range.comparePoint(node, length) >= 0\n                    );\n                } catch (e) {\n                    // `comparePoint` may fail if the `range` and `node` do not share a common\n                    // ancestor or `node` is a doctype.\n                return false;\n                }\n            }\n\n            /**\n             * CSS selector that will match the placeholder within a page/tile container.\n             */\n            //const placeholderSelector = '.annotator-placeholder';\n\n            /**\n             * Return true if `node` is inside a placeholder element created with `createPlaceholder`.\n             *\n             * This is typically used to test if a highlight element associated with an\n             * anchor is inside a placeholder.\n             *\n             * @param {Node} node\n             */\n            // function isInPlaceholder(node) {\n            //     if (!node.parentElement) {\n            //         return false;\n            //     }\n            //     return node.parentElement.closest(placeholderSelector) !== null;\n            // }\n\n            /**\n             * Get the node name for use in generating an xpath expression.\n             *\n             * @param {Node} node\n             */\n            function getNodeName(node) {\n                const nodeName = node.nodeName.toLowerCase();\n                let result = nodeName;\n                if (nodeName === '#text') {\n                    result = 'text()';\n                }\n                return result;\n            }\n\n            /**\n             * Get the index of the node as it appears in its parent's child list\n             *\n             * @param {Node} node\n             */\n            function getNodePosition(node) {\n                let pos = 0;\n                /** @type {Node|null} */\n                let tmp = node;\n                while (tmp) {\n                    if (tmp.nodeName === node.nodeName) {\n                        pos += 1;\n                    }\n                    tmp = tmp.previousSibling;\n                    }\n                return pos;\n            }\n\n            function getPathSegment(node) {\n                const name = getNodeName(node);\n                const pos = getNodePosition(node);\n                return `${name}[${pos}]`;\n            }\n\n            /**\n             * A simple XPath generator which can generate XPaths of the form\n             * /tag[index]/tag[index].\n             *\n             * @param {Node} node - The node to generate a path to\n             * @param {Node} root - Root node to which the returned path is relative\n             */\n            function xpathFromNode(node, root) {\n                let xpath = '';\n\n                /** @type {Node|null} */\n                let elem = node;\n                while (elem !== root) {\n                    if (!elem) {\n                        throw new Error('Node is not a descendant of root');\n                    }\n                    xpath = getPathSegment(elem) + '/' + xpath;\n                    elem = elem.parentNode;\n                }\n                xpath = '/' + xpath;\n                xpath = xpath.replace(/\\/$/, ''); // Remove trailing slash\n\n                return xpath;\n            }\n\n            /**\n             * Return the `index`'th immediate child of `element` whose tag name is\n             * `nodeName` (case insensitive).\n             *\n             * @param {Element} element\n             * @param {string} nodeName\n             * @param {number} index\n             */\n            function nthChildOfType(element, nodeName, index) {\n                nodeName = nodeName.toUpperCase();\n\n                let matchIndex = -1;\n                for (let i = 0; i < element.children.length; i++) {\n                const child = element.children[i];\n                if (child.nodeName.toUpperCase() === nodeName) {\n                    ++matchIndex;\n                    if (matchIndex === index) {\n                    return child;\n                    }\n                }\n                }\n\n                return null;\n            }\n\n            /**\n             * Evaluate a _simple XPath_ relative to a `root` element and return the\n             * matching element.\n             *\n             * A _simple XPath_ is a sequence of one or more `/tagName[index]` strings.\n             *\n             * Unlike `document.evaluate` this function:\n             *\n             *  - Only supports simple XPaths\n             *  - Is not affected by the document's _type_ (HTML or XML/XHTML)\n             *  - Ignores element namespaces when matching element names in the XPath against\n             *    elements in the DOM tree\n             *  - Is case insensitive for all elements, not just HTML elements\n             *\n             * The matching element is returned or `null` if no such element is found.\n             * An error is thrown if `xpath` is not a simple XPath.\n             *\n             * @param {string} xpath\n             * @param {Element} root\n             * @return {Element|null}\n             */\n            function evaluateSimpleXPath(xpath, root) {\n                const isSimpleXPath = xpath.match(/^(\\/[A-Za-z0-9-]+(\\[[0-9]+\\])?)+$/) !== null;\n                if (!isSimpleXPath) {\n                    throw new Error('Expression is not a simple XPath');\n                }\n\n                const segments = xpath.split('/');\n                let element = root;\n\n                // Remove leading empty segment. The regex above validates that the XPath\n                // has at least two segments, with the first being empty and the others non-empty.\n                segments.shift();\n\n                for (let segment of segments) {\n                    let elementName;\n                    let elementIndex;\n\n                    const separatorPos = segment.indexOf('[');\n                    if (separatorPos !== -1) {\n                        elementName = segment.slice(0, separatorPos);\n\n                        const indexStr = segment.slice(separatorPos + 1, segment.indexOf(']'));\n                        elementIndex = parseInt(indexStr) - 1;\n                        if (elementIndex < 0) {\n                        return null;\n                        }\n                    } else {\n                        elementName = segment;\n                        elementIndex = 0;\n                    }\n\n                    const child = nthChildOfType(element, elementName, elementIndex);\n                    if (!child) {\n                        return null;\n                    }\n\n                    element = child;\n                }\n\n                return element;\n            }\n\n            /**\n             * Finds an element node using an XPath relative to `root`\n             *\n             * Example:\n             *   node = nodeFromXPath('/main/article[1]/p[3]', document.body)\n             *\n             * @param {string} xpath\n             * @param {Element} [root]\n             * @return {Node|null}\n             */\n            function nodeFromXPath(xpath, root = document.body) {\n                try {\n                    return evaluateSimpleXPath(xpath, root);\n                } catch (err) {\n                    return document.evaluate(\n                        '.' + xpath,\n                        root,\n\n                        // nb. The `namespaceResolver` and `result` arguments are optional in the spec\n                        // but required in Edge Legacy.\n                        null /* namespaceResolver */,\n                        XPathResult.FIRST_ORDERED_NODE_TYPE,\n                        null /* result */\n                    ).singleNodeValue;\n                }\n            }\n\n            /**\n             * Replace a child `node` with `replacements`.\n             *\n             * nb. This is like `ChildNode.replaceWith` but it works in older browsers.\n             *\n             * @param {ChildNode} node\n             * @param {Node[]} replacements\n             */\n            function replaceWith(node, replacements) {\n                const parent = /** @type {Node} */ (node.parentNode);\n\n                replacements.forEach(r => parent.insertBefore(r, node));\n                node.remove();\n            }\n\n            /**\n             * Remove all temporary highlights under a given root element.\n             *\n             * @param {HTMLElement} root\n             */\n            function removeAllTempHighlights() {\n                const highlights = Array.from($('body')[0].querySelectorAll('.annotated_temp'));\n                if (highlights !== undefined && highlights.length != 0){\n                    removeHighlights(highlights);\n                }\n            }\n\n            /**\n             * Remove highlights from a range previously highlighted with `highlightRange`.\n             *\n             * @param {HighlightElement[]} highlights - The highlight elements returned by `highlightRange`\n             */\n            function removeHighlights(highlights) {\n                for (var i = 0; i < highlights.length; i++) {\n                    if (highlights[i].parentNode) {\n                        var pn = highlights[i].parentNode;\n                        const children = Array.from(highlights[i].childNodes);\n                        replaceWith(highlights[i], children);\n                        pn.normalize();\n                    }\n                }\n            }\n\n            // If user selects text for new annotation\n            $(document).on('mouseup', '.originaltext', function() {\n                var selectedrange = window.getSelection().getRangeAt(0);\n\n                if (selectedrange.cloneContents().textContent !== '' && canmakeannotations) {\n\n                    removeAllTempHighlights(); // remove other temporary highlights\n\n                    resetForms(); // remove old form contents\n\n                    var entry = this.id.replace(/entry-/, '');\n\n                    $('.annotation-form-' + entry + ' input[name=\"startcontainer\"]').val(xpathFromNode(selectedrange.startContainer, this));\n                    $('.annotation-form-' + entry + ' input[name=\"endcontainer\"]').val(xpathFromNode(selectedrange.endContainer, this));\n                    $('.annotation-form-' + entry + ' input[name=\"startposition\"]').val(selectedrange.startOffset);\n                    $('.annotation-form-' + entry + ' input[name=\"endposition\"]').val(selectedrange.endOffset);\n\n                    $('.annotation-form-' + entry + ' select').val(1);\n\n                    var annotatedtext = highlightRange(selectedrange, false, 'annotated_temp');\n\n                    if (annotatedtext != '') {\n                        $('#annotationpreview-temp-' + entry).html(annotatedtext);\n                    }\n\n                    $('.annotationarea-' + entry + ' .annotation-form').show();\n                    $('.annotation-form-' + entry + ' #id_text').focus();\n                }\n            });\n\n            recreateAnnotations();\n\n            // Highlight annotation and all annotated text if annotated text is hovered\n            $('.annotated').mouseenter (function() {\n                var id = this.id.replace('annotated-', '');\n                $('.annotationpreview-'+id).addClass('hovered');\n                $('.annotated-'+id).addClass('hovered');\n            });\n\n            $('.annotated').mouseleave (function() {\n                var id = this.id.replace('annotated-', '');\n                $('.annotationpreview-'+id).removeClass('hovered');\n                $('.annotated-'+id).removeClass('hovered');\n            });\n\n            // Highlight annotated text if annotationpreview is hovered\n            $('.annotatedtextpreview').mouseenter (function() {\n                var id = this.id.replace('annotationpreview-', '');\n                $('.annotated-'+id).addClass('hovered');\n            });\n\n            $('.annotatedtextpreview').mouseleave (function() {\n                var id = this.id.replace('annotationpreview-', '');\n                $('.annotated-'+id).removeClass('hovered');\n            });\n\n            // Highlight whole temp annotation if part of temp annotation is hovered\n            $(document).on('mouseover', '.annotated_temp', function(){\n                $('.annotated_temp').addClass('hovered');\n            });\n\n            $(document).on('mouseleave', '.annotated_temp', function(){\n                $('.annotated_temp').removeClass('hovered');\n            });\n\n            // onclick listener for editing annotation\n            $(document).on('click', '.annotated', function(){\n                var id = this.id.replace('annotated-', '');\n                editAnnotation(id);\n            });\n\n            // onclick listener for editing annotation\n            $(document).on('click', '.edit-annotation', function(){\n                var id = this.id.replace('edit-annotation-', '');\n                editAnnotation(id);\n            });\n\n            // onclick listener if form is canceled\n            $(document).on('click', '#id_cancel', function(e){\n                e.preventDefault();\n\n                removeAllTempHighlights(); // remove other temporary highlights\n\n                resetForms(); // remove old form contents\n            });\n\n            // Listen for return key pressed to submit annotation form.\n            $('textarea').keypress(function (e) {\n                if (e.which == 13) {\n                    $(this).parents(':eq(2)').submit();\n                    e.preventDefault();\n                }\n              });\n\n        }\n    };\n});"],"file":"annotations.min.js"}